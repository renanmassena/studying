# -*- coding: utf-8 -*-
"""Monitoria_Exercicio_Kobe.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1hRnESMFKDTH1YEcClWtfVlRhVNAiXJPK

- Baixar os dados do database do Kaggle sobre os arremessos do Kobe Bryant e criar um dataframe de pandas

- (Dica monte o Drive do Google)

- Conte quantos arremessos foram convertidos (shot_made_flag)

- Calcule qual foi a taxa de sucesso (eficiência) para todos os arremessos (total de arremessos covertidos/ total de arremessos feitos)

- Qual foi o arremesso convertido mais distante?

- Qual a distância média dos arremessos convertidos? Qual a distância média dos arremessos não-convertidos?

- Qual o quarto do jogo que o Kobe Bryant é mais eficiente?

- Agrupe pelo tipo de arremesso e descubra qual tipo de arremesso que o Kobe Bryant é mais eficiente.

- Qual foi a melhor temporada do Kobe Bryant em relação a percentual de cestas convertidas?

- Agrupe pela temporada e pelo tipo de arremesso

- Faça dois gráficos: posição em quadra dos arremessos perdidos x posição em quadra dos arremessos acertados
"""

import pandas as pd
import numpy as np
from google.colab import drive

import matplotlib.pyplot as plt

drive.mount('/content/drive')
path = '/content/drive/MyDrive/Colab/Files/kobe_bryant_shots_data.csv'

kobe = pd.read_csv(path)

kobe.columns

kobe.isnull().sum()

# 1- Conte quantos arremessos foram convertidos;

kobe['shot_made_flag'].value_counts()

# 2- Calcule qual foi a taxa de sucesso para todos os arremessos;

#11465/(11465 + 14232)

acertos = kobe[kobe['shot_made_flag']==1]
erros = kobe[kobe['shot_made_flag']==0]
taxa_sucesso = len(acertos) / (len(acertos) + len(erros)) * 100
taxa_sucesso

kobe['shot_made_flag'].value_counts(normalize=True) * 100

pd.set_option('display.max_columns', None)

kobe.head()

# 3- Qual foi o arremesso convertido mais distante?

kobe.groupby('shot_made_flag')['shot_distance'].max().reset_index()

# 4- Qual a distância média dos arremessos convertidos? E dos não-convertidos?

kobe.groupby('shot_made_flag')['shot_distance'].mean().reset_index()

kobe.columns

# 5- Qual o quarto do jogo que o Kobe Bryant é mais eficiente?

acertos.groupby('period')['shot_made_flag'].count().reset_index()

# 6- Agrupe pelo tipo de arremesso e descubra qual tipo de arremesso que o Kobe Bryant é mais eficiente;

acertos.groupby('shot_type')['shot_made_flag'].count().reset_index()

kobe.columns

# Qual foi a melhor temporada do Kobe Bryant em relação a percentual de cestas convertidas?

shots_by_season = kobe['season'].value_counts()

acertos_by_season = acertos['season'].value_counts()

pct = (acertos_by_season / shots_by_season) *100

pct.sort_values(ascending=False)



# Agrupe pela temporada e pelo tipo de arremesso

kobe.columns

kobe['shot_type']

season_by_shot_type = kobe.groupby(['season', 'shot_type'])

season_by_shot_type.head()



pd.set_option('display.max_columns', None)



kobe.columns

kobe[['combined_shot_type','loc_x', 'loc_y','shot_zone_basic','shot_zone_area','shot_zone_range']]

acertos.head(2)



# Faça dois gráficos: posição em quadra dos arremessos perdidos x posição em quadra dos arremessos acertados

plt.figure(figsize=(12,8))
plt.scatter(x='loc_x',y='loc_y', data=acertos, alpha=0.5)
plt.title('Acertos por arremesso')
plt.show()

plt.figure(figsize=(10,8))
plt.scatter(x='loc_x',y='loc_y', data=erros, c='r', alpha=0.3)
plt.title('Erros por arremesso')
plt.show()

